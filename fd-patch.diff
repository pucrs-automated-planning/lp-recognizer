diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/bitbucket-pipelines.yml fast-downward/bitbucket-pipelines.yml
--- fast-downward-original/bitbucket-pipelines.yml	2019-01-17 20:45:41.226854642 -0200
+++ fast-downward/bitbucket-pipelines.yml	2019-01-15 11:05:11.734522678 -0200
@@ -1,46 +1,47 @@
 image: ubuntu:16.04
 pipelines:
-  default:
-    - step:
-        script:
-          - apt-get update
-          - apt-get -y upgrade
-
-          # Install Fast Downward dependencies.
-          - apt-get -y install cmake g++ g++-multilib make mercurial python
-
-          # Install dependencies for running code tests.
-          - apt-get -y install clang-5.0 clang-tidy-5.0 python3 python-pip wget
-          - pip install -U pyflakes pytest
-
-          # Print information about environment.
-          - g++ --version
-          - python --version
-          - python -c "import multiprocessing; print 'CPUs:', multiprocessing.cpu_count()"
-
-          # Set up uncrustify.
-          - wget https://github.com/uncrustify/uncrustify/archive/uncrustify-0.67.tar.gz
-          - tar -xzvf uncrustify-0.67.tar.gz
-          - cd uncrustify-uncrustify-0.67
-          - mkdir build
-          - cd build
-          - cmake ../
-          - make -j8
-          - mv uncrustify ../../
-          - cd ../../
-          - rm -rf uncrustify-0.67.tar.gz uncrustify-uncrustify-0.67
-
-          # Set up VAL.
-          - apt-get -y install g++ git make flex bison
-          - git clone https://github.com/KCL-Planning/VAL.git
-          - cd VAL
-          - git checkout a5565396007eee73ac36527fbf904142b3077c74
-          - make clean  # Remove old build artifacts and binaries.
-          - make -j8
-          - mv validate ../
-          - cd ../
-          - rm -rf VAL
+  pull-requests:
+    '**':
+      - step:
+          script:
+            - apt-get update
+            - apt-get -y upgrade
+
+            # Install Fast Downward dependencies.
+            - apt-get -y install cmake g++ g++-multilib make mercurial python
+
+            # Install dependencies for running code tests.
+            - apt-get -y install clang-5.0 clang-tidy-5.0 python3 python-pip wget
+            - pip install -U pyflakes pytest
+
+            # Print information about environment.
+            - g++ --version
+            - python --version
+            - python -c "import multiprocessing; print 'CPUs:', multiprocessing.cpu_count()"
+
+            # Set up uncrustify.
+            - wget https://github.com/uncrustify/uncrustify/archive/uncrustify-0.67.tar.gz
+            - tar -xzvf uncrustify-0.67.tar.gz
+            - cd uncrustify-uncrustify-0.67
+            - mkdir build
+            - cd build
+            - cmake ../
+            - make -j8
+            - mv uncrustify ../../
+            - cd ../../
+            - rm -rf uncrustify-0.67.tar.gz uncrustify-uncrustify-0.67
+
+            # Set up VAL.
+            - apt-get -y install g++ git make flex bison
+            - git clone https://github.com/KCL-Planning/VAL.git
+            - cd VAL
+            - git checkout a5565396007eee73ac36527fbf904142b3077c74
+            - make clean  # Remove old build artifacts and binaries.
+            - make -j8
+            - mv validate ../
+            - cd ../
+            - rm -rf VAL
 
-          - export PATH="$(pwd):$PATH"  # Add uncrustify and VAL to PATH.
+            - export PATH="$(pwd):$PATH"  # Add uncrustify and VAL to PATH.
 
-          - ./misc/run-all-tests
+            - ./misc/run-all-tests
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/build_configs.py fast-downward/build_configs.py
--- fast-downward-original/build_configs.py	2019-01-17 20:45:39.530845485 -0200
+++ fast-downward/build_configs.py	2019-01-15 11:09:44.929707476 -0200
@@ -2,7 +2,7 @@
 debug32 = ["-DCMAKE_BUILD_TYPE=Debug"]
 release32nolp = ["-DCMAKE_BUILD_TYPE=Release", "-DUSE_LP=NO"]
 debug32nolp = ["-DCMAKE_BUILD_TYPE=Debug", "-DUSE_LP=NO"]
-release64 = ["-DCMAKE_BUILD_TYPE=Release", "-DALLOW_64_BIT=True", "-DCMAKE_CXX_FLAGS='-m64'"]
+release64 = ["-DCMAKE_BUILD_TYPE=Release", "-DALLOW_64_BIT=True", "-DCMAKE_CXX_FLAGS='-m64'", "-DCMAKE_CXX_STANDARD_LIBRARIES='-ldl'"]
 debug64 = ["-DCMAKE_BUILD_TYPE=Debug",   "-DALLOW_64_BIT=True", "-DCMAKE_CXX_FLAGS='-m64'"]
 release64nolp = ["-DCMAKE_BUILD_TYPE=Release", "-DALLOW_64_BIT=True", "-DCMAKE_CXX_FLAGS='-m64'", "-DUSE_LP=NO"]
 debug64nolp = ["-DCMAKE_BUILD_TYPE=Debug",   "-DALLOW_64_BIT=True", "-DCMAKE_CXX_FLAGS='-m64'", "-DUSE_LP=NO"]
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/domain.pddl fast-downward/domain.pddl
--- fast-downward-original/domain.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/domain.pddl	2019-01-15 11:24:12.000000000 -0200
@@ -0,0 +1,49 @@
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+;;; 4 Op- blocks world
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+
+(define (domain BLOCKS)
+  (:requirements :strips :typing :equality)
+  (:types block)
+  (:predicates (on ?x ?y - block)
+	       (ontable ?x - block)
+	       (clear ?x - block)
+	       (handempty)
+	       (holding ?x - block)
+	       )
+
+  (:action pick-up
+	     :parameters (?x - block)
+	     :precondition (and (clear ?x) (ontable ?x) (handempty))
+	     :effect
+	     (and (not (ontable ?x))
+		   (not (clear ?x))
+		   (not (handempty))
+		   (holding ?x)))
+
+  (:action put-down
+	     :parameters (?x - block)
+	     :precondition (holding ?x)
+	     :effect
+	     (and (not (holding ?x))
+		   (clear ?x)
+		   (handempty)
+		   (ontable ?x)))
+  (:action stack
+	     :parameters (?x ?y - block)
+	     :precondition (and (holding ?x) (clear ?y) (not (= ?x ?y)))
+	     :effect
+	     (and (not (holding ?x))
+		   (not (clear ?y))
+		   (clear ?x)
+		   (handempty)
+		   (on ?x ?y)))
+  (:action unstack
+	     :parameters (?x ?y - block)
+	     :precondition (and (on ?x ?y) (clear ?x) (handempty) (not (= ?x ?y)))
+	     :effect
+	     (and (holding ?x)
+		   (clear ?y)
+		   (not (clear ?x))
+		   (not (handempty))
+		   (not (on ?x ?y)))))
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/experiments/issue883/common_setup.py fast-downward/experiments/issue883/common_setup.py
--- fast-downward-original/experiments/issue883/common_setup.py	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/experiments/issue883/common_setup.py	2019-01-15 11:05:11.766522618 -0200
@@ -0,0 +1,394 @@
+# -*- coding: utf-8 -*-
+
+import itertools
+import os
+import platform
+import subprocess
+import sys
+
+from lab.experiment import ARGPARSER
+from lab import tools
+
+from downward.experiment import FastDownwardExperiment
+from downward.reports.absolute import AbsoluteReport
+from downward.reports.compare import ComparativeReport
+from downward.reports.scatter import ScatterPlotReport
+
+from relativescatter import RelativeScatterPlotReport
+
+
+def parse_args():
+    ARGPARSER.add_argument(
+        "--test",
+        choices=["yes", "no", "auto"],
+        default="auto",
+        dest="test_run",
+        help="test experiment locally on a small suite if --test=yes or "
+             "--test=auto and we are not on a cluster")
+    return ARGPARSER.parse_args()
+
+ARGS = parse_args()
+
+
+DEFAULT_OPTIMAL_SUITE = [
+    'agricola-opt18-strips', 'airport', 'barman-opt11-strips',
+    'barman-opt14-strips', 'blocks', 'childsnack-opt14-strips',
+    'data-network-opt18-strips', 'depot', 'driverlog',
+    'elevators-opt08-strips', 'elevators-opt11-strips',
+    'floortile-opt11-strips', 'floortile-opt14-strips', 'freecell',
+    'ged-opt14-strips', 'grid', 'gripper', 'hiking-opt14-strips',
+    'logistics00', 'logistics98', 'miconic', 'movie', 'mprime',
+    'mystery', 'nomystery-opt11-strips', 'openstacks-opt08-strips',
+    'openstacks-opt11-strips', 'openstacks-opt14-strips',
+    'openstacks-strips', 'organic-synthesis-opt18-strips',
+    'organic-synthesis-split-opt18-strips', 'parcprinter-08-strips',
+    'parcprinter-opt11-strips', 'parking-opt11-strips',
+    'parking-opt14-strips', 'pathways-noneg', 'pegsol-08-strips',
+    'pegsol-opt11-strips', 'petri-net-alignment-opt18-strips',
+    'pipesworld-notankage', 'pipesworld-tankage', 'psr-small', 'rovers',
+    'satellite', 'scanalyzer-08-strips', 'scanalyzer-opt11-strips',
+    'snake-opt18-strips', 'sokoban-opt08-strips',
+    'sokoban-opt11-strips', 'spider-opt18-strips', 'storage',
+    'termes-opt18-strips', 'tetris-opt14-strips',
+    'tidybot-opt11-strips', 'tidybot-opt14-strips', 'tpp',
+    'transport-opt08-strips', 'transport-opt11-strips',
+    'transport-opt14-strips', 'trucks-strips', 'visitall-opt11-strips',
+    'visitall-opt14-strips', 'woodworking-opt08-strips',
+    'woodworking-opt11-strips', 'zenotravel']
+
+DEFAULT_SATISFICING_SUITE = [
+    'agricola-sat18-strips', 'airport', 'assembly',
+    'barman-sat11-strips', 'barman-sat14-strips', 'blocks',
+    'caldera-sat18-adl', 'caldera-split-sat18-adl', 'cavediving-14-adl',
+    'childsnack-sat14-strips', 'citycar-sat14-adl',
+    'data-network-sat18-strips', 'depot', 'driverlog',
+    'elevators-sat08-strips', 'elevators-sat11-strips',
+    'flashfill-sat18-adl', 'floortile-sat11-strips',
+    'floortile-sat14-strips', 'freecell', 'ged-sat14-strips', 'grid',
+    'gripper', 'hiking-sat14-strips', 'logistics00', 'logistics98',
+    'maintenance-sat14-adl', 'miconic', 'miconic-fulladl',
+    'miconic-simpleadl', 'movie', 'mprime', 'mystery',
+    'nomystery-sat11-strips', 'nurikabe-sat18-adl', 'openstacks',
+    'openstacks-sat08-adl', 'openstacks-sat08-strips',
+    'openstacks-sat11-strips', 'openstacks-sat14-strips',
+    'openstacks-strips', 'optical-telegraphs',
+    'organic-synthesis-sat18-strips',
+    'organic-synthesis-split-sat18-strips', 'parcprinter-08-strips',
+    'parcprinter-sat11-strips', 'parking-sat11-strips',
+    'parking-sat14-strips', 'pathways', 'pathways-noneg',
+    'pegsol-08-strips', 'pegsol-sat11-strips', 'philosophers',
+    'pipesworld-notankage', 'pipesworld-tankage', 'psr-large',
+    'psr-middle', 'psr-small', 'rovers', 'satellite',
+    'scanalyzer-08-strips', 'scanalyzer-sat11-strips', 'schedule',
+    'settlers-sat18-adl', 'snake-sat18-strips', 'sokoban-sat08-strips',
+    'sokoban-sat11-strips', 'spider-sat18-strips', 'storage',
+    'termes-sat18-strips', 'tetris-sat14-strips',
+    'thoughtful-sat14-strips', 'tidybot-sat11-strips', 'tpp',
+    'transport-sat08-strips', 'transport-sat11-strips',
+    'transport-sat14-strips', 'trucks', 'trucks-strips',
+    'visitall-sat11-strips', 'visitall-sat14-strips',
+    'woodworking-sat08-strips', 'woodworking-sat11-strips',
+    'zenotravel']
+
+
+def get_script():
+    """Get file name of main script."""
+    return tools.get_script_path()
+
+
+def get_script_dir():
+    """Get directory of main script.
+
+    Usually a relative directory (depends on how it was called by the user.)"""
+    return os.path.dirname(get_script())
+
+
+def get_experiment_name():
+    """Get name for experiment.
+
+    Derived from the absolute filename of the main script, e.g.
+    "/ham/spam/eggs.py" => "spam-eggs"."""
+    script = os.path.abspath(get_script())
+    script_dir = os.path.basename(os.path.dirname(script))
+    script_base = os.path.splitext(os.path.basename(script))[0]
+    return "%s-%s" % (script_dir, script_base)
+
+
+def get_data_dir():
+    """Get data dir for the experiment.
+
+    This is the subdirectory "data" of the directory containing
+    the main script."""
+    return os.path.join(get_script_dir(), "data", get_experiment_name())
+
+
+def get_repo_base():
+    """Get base directory of the repository, as an absolute path.
+
+    Search upwards in the directory tree from the main script until a
+    directory with a subdirectory named ".hg" is found.
+
+    Abort if the repo base cannot be found."""
+    path = os.path.abspath(get_script_dir())
+    while os.path.dirname(path) != path:
+        if os.path.exists(os.path.join(path, ".hg")):
+            return path
+        path = os.path.dirname(path)
+    sys.exit("repo base could not be found")
+
+
+def is_running_on_cluster():
+    node = platform.node()
+    return node.endswith(".scicore.unibas.ch") or node.endswith(".cluster.bc2.ch")
+
+
+def is_test_run():
+    return ARGS.test_run == "yes" or (
+        ARGS.test_run == "auto" and not is_running_on_cluster())
+
+
+def get_algo_nick(revision, config_nick):
+    return "{revision}-{config_nick}".format(**locals())
+
+
+class IssueConfig(object):
+    """Hold information about a planner configuration.
+
+    See FastDownwardExperiment.add_algorithm() for documentation of the
+    constructor's options.
+
+    """
+    def __init__(self, nick, component_options,
+                 build_options=None, driver_options=None):
+        self.nick = nick
+        self.component_options = component_options
+        self.build_options = build_options
+        self.driver_options = driver_options
+
+
+class IssueExperiment(FastDownwardExperiment):
+    """Subclass of FastDownwardExperiment with some convenience features."""
+
+    DEFAULT_TEST_SUITE = ["depot:p01.pddl", "gripper:prob01.pddl"]
+
+    DEFAULT_TABLE_ATTRIBUTES = [
+        "cost",
+        "coverage",
+        "error",
+        "evaluations",
+        "expansions",
+        "expansions_until_last_jump",
+        "generated",
+        "memory",
+        "planner_memory",
+        "planner_time",
+        "quality",
+        "run_dir",
+        "score_evaluations",
+        "score_expansions",
+        "score_generated",
+        "score_memory",
+        "score_search_time",
+        "score_total_time",
+        "search_time",
+        "total_time",
+        ]
+
+    DEFAULT_SCATTER_PLOT_ATTRIBUTES = [
+        "evaluations",
+        "expansions",
+        "expansions_until_last_jump",
+        "initial_h_value",
+        "memory",
+        "search_time",
+        "total_time",
+        ]
+
+    PORTFOLIO_ATTRIBUTES = [
+        "cost",
+        "coverage",
+        "error",
+        "plan_length",
+        "run_dir",
+        ]
+
+    def __init__(self, revisions=None, configs=None, path=None, **kwargs):
+        """
+
+        You can either specify both *revisions* and *configs* or none
+        of them. If they are omitted, you will need to call
+        exp.add_algorithm() manually.
+
+        If *revisions* is given, it must be a non-empty list of
+        revision identifiers, which specify which planner versions to
+        use in the experiment. The same versions are used for
+        translator, preprocessor and search. ::
+
+            IssueExperiment(revisions=["issue123", "4b3d581643"], ...)
+
+        If *configs* is given, it must be a non-empty list of
+        IssueConfig objects. ::
+
+            IssueExperiment(..., configs=[
+                IssueConfig("ff", ["--search", "eager_greedy(ff())"]),
+                IssueConfig(
+                    "lama", [],
+                    driver_options=["--alias", "seq-sat-lama-2011"]),
+            ])
+
+        If *path* is specified, it must be the path to where the
+        experiment should be built (e.g.
+        /home/john/experiments/issue123/exp01/). If omitted, the
+        experiment path is derived automatically from the main
+        script's filename. Example::
+
+            script = experiments/issue123/exp01.py -->
+            path = experiments/issue123/data/issue123-exp01/
+
+        """
+
+        path = path or get_data_dir()
+
+        FastDownwardExperiment.__init__(self, path=path, **kwargs)
+
+        if (revisions and not configs) or (not revisions and configs):
+            raise ValueError(
+                "please provide either both or none of revisions and configs")
+
+        for rev in revisions:
+            for config in configs:
+                self.add_algorithm(
+                    get_algo_nick(rev, config.nick),
+                    get_repo_base(),
+                    rev,
+                    config.component_options,
+                    build_options=config.build_options,
+                    driver_options=config.driver_options)
+
+        self._revisions = revisions
+        self._configs = configs
+
+    @classmethod
+    def _is_portfolio(cls, config_nick):
+        return "fdss" in config_nick
+
+    @classmethod
+    def get_supported_attributes(cls, config_nick, attributes):
+        if cls._is_portfolio(config_nick):
+            return [attr for attr in attributes
+                    if attr in cls.PORTFOLIO_ATTRIBUTES]
+        return attributes
+
+    def add_absolute_report_step(self, **kwargs):
+        """Add step that makes an absolute report.
+
+        Absolute reports are useful for experiments that don't compare
+        revisions.
+
+        The report is written to the experiment evaluation directory.
+
+        All *kwargs* will be passed to the AbsoluteReport class. If the
+        keyword argument *attributes* is not specified, a default list
+        of attributes is used. ::
+
+            exp.add_absolute_report_step(attributes=["coverage"])
+
+        """
+        kwargs.setdefault("attributes", self.DEFAULT_TABLE_ATTRIBUTES)
+        report = AbsoluteReport(**kwargs)
+        outfile = os.path.join(
+            self.eval_dir,
+            get_experiment_name() + "." + report.output_format)
+        self.add_report(report, outfile=outfile)
+        self.add_step(
+            'publish-absolute-report', subprocess.call, ['publish', outfile])
+
+    def add_comparison_table_step(self, **kwargs):
+        """Add a step that makes pairwise revision comparisons.
+
+        Create comparative reports for all pairs of Fast Downward
+        revisions. Each report pairs up the runs of the same config and
+        lists the two absolute attribute values and their difference
+        for all attributes in kwargs["attributes"].
+
+        All *kwargs* will be passed to the CompareConfigsReport class.
+        If the keyword argument *attributes* is not specified, a
+        default list of attributes is used. ::
+
+            exp.add_comparison_table_step(attributes=["coverage"])
+
+        """
+        kwargs.setdefault("attributes", self.DEFAULT_TABLE_ATTRIBUTES)
+
+        def make_comparison_tables():
+            for rev1, rev2 in itertools.combinations(self._revisions, 2):
+                compared_configs = []
+                for config in self._configs:
+                    config_nick = config.nick
+                    compared_configs.append(
+                        ("%s-%s" % (rev1, config_nick),
+                         "%s-%s" % (rev2, config_nick),
+                         "Diff (%s)" % config_nick))
+                report = ComparativeReport(compared_configs, **kwargs)
+                outfile = os.path.join(
+                    self.eval_dir,
+                    "%s-%s-%s-compare.%s" % (
+                        self.name, rev1, rev2, report.output_format))
+                report(self.eval_dir, outfile)
+
+        def publish_comparison_tables():
+            for rev1, rev2 in itertools.combinations(self._revisions, 2):
+                outfile = os.path.join(
+                    self.eval_dir,
+                    "%s-%s-%s-compare.html" % (self.name, rev1, rev2))
+                subprocess.call(["publish", outfile])
+
+        self.add_step("make-comparison-tables", make_comparison_tables)
+        self.add_step(
+            "publish-comparison-tables", publish_comparison_tables)
+
+    def add_scatter_plot_step(self, relative=False, attributes=None):
+        """Add step creating (relative) scatter plots for all revision pairs.
+
+        Create a scatter plot for each combination of attribute,
+        configuration and revisions pair. If *attributes* is not
+        specified, a list of common scatter plot attributes is used.
+        For portfolios all attributes except "cost", "coverage" and
+        "plan_length" will be ignored. ::
+
+            exp.add_scatter_plot_step(attributes=["expansions"])
+
+        """
+        if relative:
+            report_class = RelativeScatterPlotReport
+            scatter_dir = os.path.join(self.eval_dir, "scatter-relative")
+            step_name = "make-relative-scatter-plots"
+        else:
+            report_class = ScatterPlotReport
+            scatter_dir = os.path.join(self.eval_dir, "scatter-absolute")
+            step_name = "make-absolute-scatter-plots"
+        if attributes is None:
+            attributes = self.DEFAULT_SCATTER_PLOT_ATTRIBUTES
+
+        def make_scatter_plot(config_nick, rev1, rev2, attribute):
+            name = "-".join([self.name, rev1, rev2, attribute, config_nick])
+            print "Make scatter plot for", name
+            algo1 = "{}-{}".format(rev1, config_nick)
+            algo2 = "{}-{}".format(rev2, config_nick)
+            report = report_class(
+                filter_config=[algo1, algo2],
+                attributes=[attribute],
+                get_category=lambda run1, run2: run1["domain"],
+                legend_location=(1.3, 0.5))
+            report(
+                self.eval_dir,
+                os.path.join(scatter_dir, rev1 + "-" + rev2, name))
+
+        def make_scatter_plots():
+            for config in self._configs:
+                for rev1, rev2 in itertools.combinations(self._revisions, 2):
+                    for attribute in self.get_supported_attributes(
+                            config.nick, attributes):
+                        make_scatter_plot(config.nick, rev1, rev2, attribute)
+
+        self.add_step(step_name, make_scatter_plots)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/experiments/issue883/parser.py fast-downward/experiments/issue883/parser.py
--- fast-downward-original/experiments/issue883/parser.py	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/experiments/issue883/parser.py	2019-01-15 11:05:11.766522618 -0200
@@ -0,0 +1,104 @@
+#! /usr/bin/env python
+
+import logging
+import re
+
+from lab.parser import Parser
+
+
+class CommonParser(Parser):
+    def add_difference(self, diff, val1, val2):
+        def diff_func(content, props):
+            if props.get(val1) is None or props.get(val2) is None:
+                diff_val = None
+            else:
+                diff_val = props.get(val1) - props.get(val2)
+            props[diff] = diff_val
+        self.add_function(diff_func)
+
+    def _get_flags(self, flags_string):
+        flags = 0
+        for char in flags_string:
+            flags |= getattr(re, char)
+        return flags
+
+    def add_repeated_pattern(
+            self, name, regex, file="run.log", required=False, type=int,
+            flags=""):
+        def find_all_occurences(content, props):
+            matches = re.findall(regex, content, flags=self._get_flags(flags))
+            if required and not matches:
+                logging.error("Pattern {0} not found in file {1}".format(regex, file))
+            props[name] = [type(m) for m in matches]
+
+        self.add_function(find_all_occurences, file=file)
+
+    def add_pattern(self, name, regex, file="run.log", required=False, type=int, flags=""):
+        Parser.add_pattern(self, name, regex, file=file, required=required, type=type, flags=flags)
+
+    def add_bottom_up_pattern(self, name, regex, file="run.log", required=True, type=int, flags=""):
+
+        def search_from_bottom(content, props):
+            reversed_content = "\n".join(reversed(content.splitlines()))
+            match = re.search(regex, reversed_content, flags=self._get_flags(flags))
+            if required and not match:
+                logging.error("Pattern {0} not found in file {1}".format(regex, file))
+            if match:
+                props[name] = type(match.group(1))
+
+        self.add_function(search_from_bottom, file=file)
+
+
+def no_search(content, props):
+    if "search_start_time" not in props:
+        error = props.get("error")
+        if error is not None and error != "incomplete-search-found-no-plan":
+            props["error"] = "no-search-due-to-" + error
+
+
+REFINEMENT_ATTRIBUTES = [
+    ("time_for_finding_traces", r"Time for finding abstract traces: (.+)s"),
+    ("time_for_finding_flaws", r"Time for finding flaws: (.+)s"),
+    ("time_for_splitting_states", r"Time for splitting states: (.+)s"),
+]
+
+
+def compute_total_times(content, props):
+    for attribute, pattern in REFINEMENT_ATTRIBUTES:
+        props["total_" + attribute] = sum(props[attribute])
+
+
+def add_time_analysis(content, props):
+    init_time = props.get("init_time")
+    if not init_time:
+        return
+    parts = []
+    parts.append("{init_time:.2f}:".format(**props))
+    for attribute, pattern in REFINEMENT_ATTRIBUTES:
+        time = props["total_" + attribute]
+        relative_time = time / init_time
+        print time, type(time)
+        parts.append("{:.2f} ({:.2f})".format(time, relative_time))
+
+    props["time_analysis"] = " ".join(parts)
+
+
+def main():
+    parser = CommonParser()
+    parser.add_pattern("search_start_time", r"\[g=0, 1 evaluated, 0 expanded, t=(.+)s, \d+ KB\]", type=float)
+    parser.add_pattern("search_start_memory", r"\[g=0, 1 evaluated, 0 expanded, t=.+s, (\d+) KB\]", type=int)
+    parser.add_pattern("init_time", r"Time for initializing additive Cartesian heuristic: (.+)s", type=float)
+    parser.add_pattern("cartesian_states", r"^Cartesian states: (\d+)\n", type=int)
+
+    for attribute, pattern in REFINEMENT_ATTRIBUTES:
+        parser.add_repeated_pattern(attribute, pattern, type=float, required=False)
+
+    parser.add_function(no_search)
+    parser.add_function(compute_total_times)
+    parser.add_function(add_time_analysis)
+
+    parser.parse()
+
+
+if __name__ == "__main__":
+    main()
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/experiments/issue883/relativescatter.py fast-downward/experiments/issue883/relativescatter.py
--- fast-downward-original/experiments/issue883/relativescatter.py	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/experiments/issue883/relativescatter.py	2019-01-15 11:05:11.766522618 -0200
@@ -0,0 +1,105 @@
+# -*- coding: utf-8 -*-
+
+from collections import defaultdict
+
+from matplotlib import ticker
+
+from downward.reports.scatter import ScatterPlotReport
+from downward.reports.plot import PlotReport, Matplotlib, MatplotlibPlot
+
+
+# TODO: handle outliers
+
+# TODO: this is mostly copied from ScatterMatplotlib (scatter.py)
+class RelativeScatterMatplotlib(Matplotlib):
+    @classmethod
+    def _plot(cls, report, axes, categories, styles):
+        # Display grid
+        axes.grid(b=True, linestyle='-', color='0.75')
+
+        has_points = False
+        # Generate the scatter plots
+        for category, coords in sorted(categories.items()):
+            X, Y = zip(*coords)
+            axes.scatter(X, Y, s=42, label=category, **styles[category])
+            if X and Y:
+                has_points = True
+
+        if report.xscale == 'linear' or report.yscale == 'linear':
+            plot_size = report.missing_val * 1.01
+        else:
+            plot_size = report.missing_val * 1.25
+
+        # make 5 ticks above and below 1
+        yticks = []
+        tick_step = report.ylim_top**(1/5.0)
+        for i in xrange(-5, 6):
+            yticks.append(tick_step**i)
+        axes.set_yticks(yticks)
+        axes.get_yaxis().set_major_formatter(ticker.ScalarFormatter())
+
+        axes.set_xlim(report.xlim_left or -1, report.xlim_right or plot_size)
+        axes.set_ylim(report.ylim_bottom or -1, report.ylim_top or plot_size)
+
+        for axis in [axes.xaxis, axes.yaxis]:
+            MatplotlibPlot.change_axis_formatter(
+                axis,
+                report.missing_val if report.show_missing else None)
+        return has_points
+
+
+class RelativeScatterPlotReport(ScatterPlotReport):
+    """
+    Generate a scatter plot that shows a relative comparison of two
+    algorithms with regard to the given attribute. The attribute value
+    of algorithm 1 is shown on the x-axis and the relation to the value
+    of algorithm 2 on the y-axis.
+    """
+
+    def __init__(self, show_missing=True, get_category=None, **kwargs):
+        ScatterPlotReport.__init__(self, show_missing, get_category, **kwargs)
+        if self.output_format == 'tex':
+            raise "not supported"
+        else:
+            self.writer = RelativeScatterMatplotlib
+
+    def _fill_categories(self, runs):
+        # We discard the *runs* parameter.
+        # Map category names to value tuples
+        categories = defaultdict(list)
+        self.ylim_bottom = 2
+        self.ylim_top = 0.5
+        self.xlim_left = float("inf")
+        for (domain, problem), runs in self.problem_runs.items():
+            if len(runs) != 2:
+                continue
+            run1, run2 = runs
+            assert (run1['algorithm'] == self.algorithms[0] and
+                    run2['algorithm'] == self.algorithms[1])
+            val1 = run1.get(self.attribute)
+            val2 = run2.get(self.attribute)
+            if not val1 or not val2:
+                continue
+            category = self.get_category(run1, run2)
+            assert val1 > 0, (domain, problem, self.algorithms[0], val1)
+            assert val2 > 0, (domain, problem, self.algorithms[1], val2)
+            x = val1
+            y = val2 / float(val1)
+
+            categories[category].append((x, y))
+
+            self.ylim_top = max(self.ylim_top, y)
+            self.ylim_bottom = min(self.ylim_bottom, y)
+            self.xlim_left = min(self.xlim_left, x)
+
+        # center around 1
+        if self.ylim_bottom < 1:
+            self.ylim_top = max(self.ylim_top, 1 / float(self.ylim_bottom))
+        if self.ylim_top > 1:
+            self.ylim_bottom = min(self.ylim_bottom, 1 / float(self.ylim_top))
+        return categories
+
+    def _set_scales(self, xscale, yscale):
+        # ScatterPlot uses log-scaling on the x-axis by default.
+        PlotReport._set_scales(
+            self, xscale or self.attribute.scale or 'log', 'log')
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/experiments/issue883/v1.py fast-downward/experiments/issue883/v1.py
--- fast-downward-original/experiments/issue883/v1.py	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/experiments/issue883/v1.py	2019-01-15 11:05:11.762522625 -0200
@@ -0,0 +1,81 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+
+import os
+
+from lab.environments import LocalEnvironment, BaselSlurmEnvironment
+
+import common_setup
+from common_setup import IssueConfig, IssueExperiment
+from relativescatter import RelativeScatterPlotReport
+
+DIR = os.path.dirname(os.path.abspath(__file__))
+BENCHMARKS_DIR = os.environ["DOWNWARD_BENCHMARKS"]
+BUILD = "release64"
+REVISIONS = ["issue883-base", "issue883-v1"]
+DRIVER_OPTIONS = ["--build", BUILD]
+CONFIGS = [
+    IssueConfig(
+        nick + "-" + max_transitions_nick,
+        config,
+        build_options=[BUILD],
+        driver_options=DRIVER_OPTIONS)
+    for max_transitions_nick, max_transitions in [("1M", 1000000), ("2M", 2000000)]
+    for nick, config in [
+        ("cegar-original", ["--search", "astar(cegar(subtasks=[original()], max_transitions={max_transitions}))".format(**locals())]),
+        ("cegar-landmarks-goals", ["--search", "astar(cegar(max_transitions={max_transitions}))".format(**locals())]),
+        ]
+]
+SUITE = common_setup.DEFAULT_OPTIMAL_SUITE
+ENVIRONMENT = BaselSlurmEnvironment(
+    partition="infai_2",
+    email="jendrik.seipp@unibas.ch",
+    export=["PATH", "DOWNWARD_BENCHMARKS"])
+
+if common_setup.is_test_run():
+    SUITE = [
+        #"depot:p02.pddl",
+        "gripper:prob01.pddl"]
+    ENVIRONMENT = LocalEnvironment(processes=1)
+
+exp = IssueExperiment(
+    revisions=REVISIONS,
+    configs=CONFIGS,
+    environment=ENVIRONMENT,
+)
+exp.add_suite(BENCHMARKS_DIR, SUITE)
+
+exp.add_parser(exp.EXITCODE_PARSER)
+#exp.add_parser(exp.TRANSLATOR_PARSER)
+exp.add_parser(exp.SINGLE_SEARCH_PARSER)
+exp.add_parser(exp.PLANNER_PARSER)
+exp.add_parser(os.path.join(DIR, "parser.py"))
+
+exp.add_step('build', exp.build)
+exp.add_step('start', exp.start_runs)
+exp.add_fetcher(name='fetch')
+
+REFINEMENT_ATTRIBUTES = [
+    "time_for_finding_traces",
+    "time_for_finding_flaws",
+    "time_for_splitting_states",
+]
+attributes = (
+    IssueExperiment.DEFAULT_TABLE_ATTRIBUTES +
+    ["search_start_memory", "init_time", "time_analysis"] +
+    REFINEMENT_ATTRIBUTES +
+    ["total_" + attr for attr in REFINEMENT_ATTRIBUTES])
+#exp.add_absolute_report_step(attributes=attributes)
+exp.add_comparison_table_step(attributes=attributes)
+
+if len(REVISIONS) == 2:
+    for attribute in ["init_time", "expansions_until_last_jump", "total_time_for_splitting_states", "total_time_for_finding_traces"]:
+        for config in CONFIGS:
+            exp.add_report(
+                RelativeScatterPlotReport(
+                    attributes=[attribute],
+                    filter_algorithm=["{}-{}".format(rev, config.nick) for rev in REVISIONS],
+                    get_category=lambda run1, run2: run1.get("domain")),
+                outfile="{}-{}-{}-{}-{}.png".format(exp.name, attribute, config.nick, *REVISIONS))
+
+exp.run_steps()
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/fast-downward fast-downward/fast-downward
--- fast-downward-original/fast-downward	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/fast-downward	2019-01-15 11:05:11.830522498 -0200
@@ -0,0 +1,13 @@
+#!/usr/bin/env bash
+DIR=`dirname $0`
+DOMAIN=$1
+shift
+PROBLEM=$1
+shift
+# ${DIR}/fast-downward.py $DOMAIN $PROBLEM --search "astar(lmcut())" "$@"
+# ${DIR}/fast-downward.py $DOMAIN $PROBLEM --search "astar(seq())" "$@"
+# ${DIR}/fast-downward.py --build=release64 $DOMAIN $PROBLEM --search "astar(operatorcounting([lmcut_constraints()], lpsolver=CPLEX, transform=no_transform(), cache_estimates=true))" "$@"
+# ${DIR}/fast-downward.py --build=release64 $DOMAIN $PROBLEM --search "astar(operatorcounting([lmcut_constraints(), pho_constraints(), state_equation_constraints()]))" "$@"
+${DIR}/fast-downward.py --build=release64 $DOMAIN $PROBLEM --search "astar(operatorcounting([lmcut_constraints(), pho_constraints(), state_equation_constraints()]))" "$@"
+
+# ${DIR}/fast-downward.py $DOMAIN $PROBLEM --alias seq-opt-lmcut "$@"
\ No newline at end of file
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/fd-constraints fast-downward/fd-constraints
--- fast-downward-original/fd-constraints	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/fd-constraints	2019-01-15 11:05:11.830522498 -0200
@@ -0,0 +1,14 @@
+#!/usr/bin/env bash
+DIR=`dirname $0`
+DOMAIN=$1
+shift
+PROBLEM=$1
+shift
+# ${DIR}/fast-downward.py $DOMAIN $PROBLEM --search "astar(lmcut())" "$@"
+# ${DIR}/fast-downward.py $DOMAIN $PROBLEM --search "astar(seq())" "$@"
+# ${DIR}/fast-downward.py --build=release64 $DOMAIN $PROBLEM --search "astar(operatorcounting([lmcut_constraints()], lpsolver=CPLEX, transform=no_transform(), cache_estimates=true))" "$@"
+# ${DIR}/fast-downward.py --build=release64 $DOMAIN $PROBLEM --search "astar(operatorcounting([lmcut_constraints(), pho_constraints(), state_equation_constraints()]))" "$@"
+
+# ${DIR}/builds/debug64/bin/downward --search "astar(ocsingleshot([lmcut_constraints()], lpsolver=CPLEX, transform=no_transform(), cache_estimates=true))" --internal-plan-file ${DIR}/sas_plan < output.sas
+
+${DIR}/fast-downward.py --build=release64 $DOMAIN $PROBLEM --search "astar(ocsingleshot([lmcut_constraints(), pho_constraints(), state_equation_constraints()],enforce_observations=false))" "$@"
\ No newline at end of file
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_0_problem.pddl fast-downward/hyp_0_problem.pddl
--- fast-downward-original/hyp_0_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_0_problem.pddl	2019-01-17 16:47:49.131986000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR D)
+(ONTABLE W)
+(ON D R)
+(ON R A)
+(ON A W)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_10_problem.pddl fast-downward/hyp_10_problem.pddl
--- fast-downward-original/hyp_10_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_10_problem.pddl	2019-01-17 16:47:49.819983000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR D)
+(ONTABLE E)
+(ON D O)
+(ON O P)
+(ON P E)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_11_problem.pddl fast-downward/hyp_11_problem.pddl
--- fast-downward-original/hyp_11_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_11_problem.pddl	2019-01-17 16:47:49.887982000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR D)
+(ONTABLE R)
+(ON D E)
+(ON E A)
+(ON A R)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_12_problem.pddl fast-downward/hyp_12_problem.pddl
--- fast-downward-original/hyp_12_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_12_problem.pddl	2019-01-17 16:47:49.955982000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR W)
+(ONTABLE E)
+(ON W O)
+(ON O R)
+(ON R E)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_13_problem.pddl fast-downward/hyp_13_problem.pddl
--- fast-downward-original/hyp_13_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_13_problem.pddl	2019-01-17 16:47:50.023982000 -0200
@@ -0,0 +1,32 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR P)
+(ONTABLE R)
+(ON P O)
+(ON O W)
+(ON W E)
+(ON E R)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_14_problem.pddl fast-downward/hyp_14_problem.pddl
--- fast-downward-original/hyp_14_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_14_problem.pddl	2019-01-17 16:47:50.091981000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR R)
+(ONTABLE P)
+(ON R E)
+(ON E A)
+(ON A P)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_15_problem.pddl fast-downward/hyp_15_problem.pddl
--- fast-downward-original/hyp_15_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_15_problem.pddl	2019-01-17 16:47:50.159981000 -0200
@@ -0,0 +1,32 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR C)
+(ONTABLE R)
+(ON C O)
+(ON O W)
+(ON W E)
+(ON E R)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_16_problem.pddl fast-downward/hyp_16_problem.pddl
--- fast-downward-original/hyp_16_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_16_problem.pddl	2019-01-17 16:47:50.227981000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR C)
+(ONTABLE E)
+(ON C O)
+(ON O R)
+(ON R E)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_17_problem.pddl fast-downward/hyp_17_problem.pddl
--- fast-downward-original/hyp_17_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_17_problem.pddl	2019-01-17 16:47:50.295980000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR P)
+(ONTABLE E)
+(ON P O)
+(ON O R)
+(ON R E)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_18_problem.pddl fast-downward/hyp_18_problem.pddl
--- fast-downward-original/hyp_18_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_18_problem.pddl	2019-01-17 16:47:50.363980000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR W)
+(ONTABLE E)
+(ON W A)
+(ON A D)
+(ON D E)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_19_problem.pddl fast-downward/hyp_19_problem.pddl
--- fast-downward-original/hyp_19_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_19_problem.pddl	2019-01-17 16:47:50.431980000 -0200
@@ -0,0 +1,30 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR P)
+(ONTABLE W)
+(ON P A)
+(ON A W)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_1_problem.pddl fast-downward/hyp_1_problem.pddl
--- fast-downward-original/hyp_1_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_1_problem.pddl	2019-01-17 16:47:49.203985000 -0200
@@ -0,0 +1,30 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR W)
+(ONTABLE R)
+(ON W A)
+(ON A R)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_20_problem.pddl fast-downward/hyp_20_problem.pddl
--- fast-downward-original/hyp_20_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_20_problem.pddl	2019-01-17 16:47:50.503979000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR R)
+(ONTABLE E)
+(ON R A)
+(ON A P)
+(ON P E)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_3_problem.pddl fast-downward/hyp_3_problem.pddl
--- fast-downward-original/hyp_3_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_3_problem.pddl	2019-01-17 16:47:49.335985000 -0200
@@ -0,0 +1,30 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR W)
+(ONTABLE D)
+(ON W A)
+(ON A D)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_4_problem.pddl fast-downward/hyp_4_problem.pddl
--- fast-downward-original/hyp_4_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_4_problem.pddl	2019-01-17 16:47:49.403984000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR C)
+(ONTABLE W)
+(ON C R)
+(ON R O)
+(ON O W)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_5_problem.pddl fast-downward/hyp_5_problem.pddl
--- fast-downward-original/hyp_5_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_5_problem.pddl	2019-01-17 16:47:49.471984000 -0200
@@ -0,0 +1,30 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR R)
+(ONTABLE W)
+(ON R O)
+(ON O W)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_6_problem.pddl fast-downward/hyp_6_problem.pddl
--- fast-downward-original/hyp_6_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_6_problem.pddl	2019-01-17 16:47:49.543984000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR W)
+(ONTABLE R)
+(ON W E)
+(ON E A)
+(ON A R)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_7_problem.pddl fast-downward/hyp_7_problem.pddl
--- fast-downward-original/hyp_7_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_7_problem.pddl	2019-01-17 16:47:49.615983000 -0200
@@ -0,0 +1,30 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR E)
+(ONTABLE R)
+(ON E A)
+(ON A R)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_8_problem.pddl fast-downward/hyp_8_problem.pddl
--- fast-downward-original/hyp_8_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_8_problem.pddl	2019-01-17 16:47:49.683983000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR P)
+(ONTABLE R)
+(ON P E)
+(ON E A)
+(ON A R)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/hyp_9_problem.pddl fast-downward/hyp_9_problem.pddl
--- fast-downward-original/hyp_9_problem.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/hyp_9_problem.pddl	2019-01-17 16:47:49.751983000 -0200
@@ -0,0 +1,31 @@
+
+(define (problem blocks_words)
+(:domain blocks)
+(:objects
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+(CLEAR R)
+(ONTABLE E)
+(ON R O)
+(ON O P)
+(ON P E)
+))
+)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/install-osi-linux.sh fast-downward/install-osi-linux.sh
--- fast-downward-original/install-osi-linux.sh	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/install-osi-linux.sh	2019-01-15 11:05:11.830522498 -0200
@@ -0,0 +1,21 @@
+#!/usr/bin/env bash
+export DOWNWARD_CPLEX_ROOT64=/opt/ibm/ILOG/CPLEX_Studio_Community128/cplex
+# You should probably change the line below to match where you want COIN64
+export DOWNWARD_COIN_ROOT64=~/workspace-planning/coin64 
+pushd ..
+wget -c http://www.coin-or.org/download/source/Osi/Osi-0.107.9.tgz
+tar xvzf Osi-0.107.9.tgz
+cd Osi-0.107.9
+./configure CC="gcc"  CFLAGS="-m64 -pthread -Wno-long-long" \
+            CXX="g++" CXXFLAGS="-m64 -pthread -Wno-long-long" \
+            LDFLAGS="-L$DOWNWARD_CPLEX_ROOT64/lib/x86-64_linux/static_pic" \
+            --without-lapack --enable-static=yes \
+            --prefix="$DOWNWARD_COIN_ROOT64" \
+            --disable-zlib --disable-bzlib \
+            --with-cplex-incdir=$DOWNWARD_CPLEX_ROOT64/include/ilcplex --with-cplex-lib="-lcplex -lm"
+make
+make install
+cd ..
+# rm -rf Osi-0.107.9
+# rm Osi-0.107.9.tgz
+popd
\ No newline at end of file
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/install-osi-mac.sh fast-downward/install-osi-mac.sh
--- fast-downward-original/install-osi-mac.sh	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/install-osi-mac.sh	2019-01-15 11:05:11.830522498 -0200
@@ -0,0 +1,23 @@
+#!/usr/bin/env bash
+pushd ..
+export DOWNWARD_CPLEX_ROOT64=/Applications/CPLEX_Studio_Community128/cplex
+# You should probably change the line below to match where you want COIN64
+export DOWNWARD_COIN_ROOT64=~/Documents/workspace-planning/coin64 
+wget -c http://www.coin-or.org/download/source/Osi/Osi-0.107.9.tgz
+tar xvzf Osi-0.107.9.tgz
+cd Osi-0.107.9
+
+./configure CC="gcc"  CFLAGS="-m64 -arch x86_64 -pthread -Wno-long-long" \
+            CXX="g++" CXXFLAGS="-m64 -arch x86_64 -pthread -Wno-long-long" \
+            LDFLAGS="-L$DOWNWARD_CPLEX_ROOT64/lib/x86-64_osx/static_pic -arch x86_64 -v" \
+            --without-lapack --disable-shared --enable-static=yes \
+            --prefix="$DOWNWARD_COIN_ROOT64" \
+            --disable-zlib --disable-bzlib \
+            --with-cplex-incdir=$DOWNWARD_CPLEX_ROOT64/include/ilcplex --with-cplex-lib="-lcplex -lm -ldl"
+
+make -j8
+make install
+cd ..
+# rm -rf Osi-0.107.9
+# rm Osi-0.107.9.tgz
+popd
\ No newline at end of file
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/misc/tests/test-translator.py fast-downward/misc/tests/test-translator.py
--- fast-downward-original/misc/tests/test-translator.py	2019-01-17 20:45:41.226854642 -0200
+++ fast-downward/misc/tests/test-translator.py	2019-01-15 11:05:11.766522618 -0200
@@ -70,8 +70,10 @@
 
 def _get_all_tasks_by_domain(benchmarks_dir):
     # Ignore domains where translating the first task takes too much time or memory.
+    # We also ignore city
     blacklisted_domains = [
         "agricola-sat18-strips",
+        "citycar-sat14-adl", # cf. issue875
         "organic-synthesis-sat18-strips",
         "organic-synthesis-split-opt18-strips",
         "organic-synthesis-split-sat18-strips"]
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/obs.dat fast-downward/obs.dat
--- fast-downward-original/obs.dat	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/obs.dat	2009-01-08 21:45:09.000000000 -0200
@@ -0,0 +1,10 @@
+(UNSTACK R P)
+(STACK R E)
+(PICK-UP O)
+(STACK O R)
+(UNSTACK D A)
+(STACK D W)
+(UNSTACK A C)
+(PUT-DOWN A)
+(PICK-UP C)
+(STACK C O)
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/ocsingleshot_heuristic_result.dat fast-downward/ocsingleshot_heuristic_result.dat
--- fast-downward-original/ocsingleshot_heuristic_result.dat	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/ocsingleshot_heuristic_result.dat	2019-01-17 17:33:04.761766914 -0200
@@ -0,0 +1,10 @@
+(pick-up c) = 1
+(pick-up o) = 1
+(put-down a) = 1
+(stack c o) = 1
+(stack d w) = 1
+(stack o r) = 1
+(stack r e) = 1
+(unstack a c) = 1
+(unstack d a) = 1
+(unstack r p) = 1
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/src/CMakeLists.txt.user fast-downward/src/CMakeLists.txt.user
--- fast-downward-original/src/CMakeLists.txt.user	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/src/CMakeLists.txt.user	2019-01-17 20:43:25.538051949 -0200
@@ -0,0 +1,380 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE QtCreatorProject>
+<!-- Written by QtCreator 4.7.1, 2019-01-17T20:43:25. -->
+<qtcreator>
+ <data>
+  <variable>EnvironmentId</variable>
+  <value type="QByteArray">{a073dff3-0f4e-4bd3-9892-156410675575}</value>
+ </data>
+ <data>
+  <variable>ProjectExplorer.Project.ActiveTarget</variable>
+  <value type="int">0</value>
+ </data>
+ <data>
+  <variable>ProjectExplorer.Project.EditorSettings</variable>
+  <valuemap type="QVariantMap">
+   <value type="bool" key="EditorConfiguration.AutoIndent">true</value>
+   <value type="bool" key="EditorConfiguration.AutoSpacesForTabs">false</value>
+   <value type="bool" key="EditorConfiguration.CamelCaseNavigation">true</value>
+   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.0">
+    <value type="QString" key="language">Cpp</value>
+    <valuemap type="QVariantMap" key="value">
+     <value type="QByteArray" key="CurrentPreferences">CppGlobal</value>
+    </valuemap>
+   </valuemap>
+   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.1">
+    <value type="QString" key="language">QmlJS</value>
+    <valuemap type="QVariantMap" key="value">
+     <value type="QByteArray" key="CurrentPreferences">QmlJSGlobal</value>
+    </valuemap>
+   </valuemap>
+   <value type="int" key="EditorConfiguration.CodeStyle.Count">2</value>
+   <value type="QByteArray" key="EditorConfiguration.Codec">UTF-8</value>
+   <value type="bool" key="EditorConfiguration.ConstrainTooltips">false</value>
+   <value type="int" key="EditorConfiguration.IndentSize">4</value>
+   <value type="bool" key="EditorConfiguration.KeyboardTooltips">false</value>
+   <value type="int" key="EditorConfiguration.MarginColumn">80</value>
+   <value type="bool" key="EditorConfiguration.MouseHiding">true</value>
+   <value type="bool" key="EditorConfiguration.MouseNavigation">true</value>
+   <value type="int" key="EditorConfiguration.PaddingMode">1</value>
+   <value type="bool" key="EditorConfiguration.ScrollWheelZooming">true</value>
+   <value type="bool" key="EditorConfiguration.ShowMargin">false</value>
+   <value type="int" key="EditorConfiguration.SmartBackspaceBehavior">0</value>
+   <value type="bool" key="EditorConfiguration.SmartSelectionChanging">true</value>
+   <value type="bool" key="EditorConfiguration.SpacesForTabs">true</value>
+   <value type="int" key="EditorConfiguration.TabKeyBehavior">0</value>
+   <value type="int" key="EditorConfiguration.TabSize">8</value>
+   <value type="bool" key="EditorConfiguration.UseGlobal">true</value>
+   <value type="int" key="EditorConfiguration.Utf8BomBehavior">1</value>
+   <value type="bool" key="EditorConfiguration.addFinalNewLine">true</value>
+   <value type="bool" key="EditorConfiguration.cleanIndentation">true</value>
+   <value type="bool" key="EditorConfiguration.cleanWhitespace">true</value>
+   <value type="bool" key="EditorConfiguration.inEntireDocument">false</value>
+  </valuemap>
+ </data>
+ <data>
+  <variable>ProjectExplorer.Project.PluginSettings</variable>
+  <valuemap type="QVariantMap">
+   <valuelist type="QVariantList" key="ClangCodeModel.CustomCommandLineKey"/>
+   <value type="bool" key="ClangCodeModel.UseGlobalConfig">true</value>
+   <value type="bool" key="ClangTools.BuildBeforeAnalysis">false</value>
+   <valuelist type="QVariantList" key="ClangTools.SelectedDirs"/>
+   <valuelist type="QVariantList" key="ClangTools.SelectedFiles"/>
+   <valuelist type="QVariantList" key="ClangTools.SuppressedDiagnostics"/>
+   <value type="bool" key="ClangTools.UseGlobalSettings">true</value>
+  </valuemap>
+ </data>
+ <data>
+  <variable>ProjectExplorer.Project.Target.0</variable>
+  <valuemap type="QVariantMap">
+   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Desktop Qt 5.11.1 GCC 64bit</value>
+   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Desktop Qt 5.11.1 GCC 64bit</value>
+   <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">qt.qt5.5111.gcc_64_kit</value>
+   <value type="int" key="ProjectExplorer.Target.ActiveBuildConfiguration">0</value>
+   <value type="int" key="ProjectExplorer.Target.ActiveDeployConfiguration">0</value>
+   <value type="int" key="ProjectExplorer.Target.ActiveRunConfiguration">0</value>
+   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.0">
+    <valuelist type="QVariantList" key="CMake.Configuration"/>
+    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory">/home/pereira/Desktop/goal_recognition/fast-downward/build-src-Desktop_Qt_5_11_1_GCC_64bit-Default</value>
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
+     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
+      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments"></value>
+      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
+       <value type="QString">all</value>
+      </valuelist>
+      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">CMake Build</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
+     </valuemap>
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
+    </valuemap>
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
+     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
+      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments"></value>
+      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
+       <value type="QString">clean</value>
+      </valuelist>
+      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">CMake Build</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
+     </valuemap>
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
+    </valuemap>
+    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
+    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
+    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Default</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Default</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeBuildConfiguration</value>
+   </valuemap>
+   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.1">
+    <valuelist type="QVariantList" key="CMake.Configuration">
+     <value type="QString">CMAKE_BUILD_TYPE:STRING=Debug</value>
+    </valuelist>
+    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory">/home/pereira/Desktop/goal_recognition/fast-downward/build-src-Desktop_Qt_5_11_1_GCC_64bit-Debug</value>
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
+     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
+      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments"></value>
+      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
+       <value type="QString">all</value>
+      </valuelist>
+      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">CMake Build</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
+     </valuemap>
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
+    </valuemap>
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
+     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
+      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments"></value>
+      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
+       <value type="QString">clean</value>
+      </valuelist>
+      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">CMake Build</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
+     </valuemap>
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
+    </valuemap>
+    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
+    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
+    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Debug</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Debug</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeBuildConfiguration</value>
+   </valuemap>
+   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.2">
+    <valuelist type="QVariantList" key="CMake.Configuration">
+     <value type="QString">CMAKE_BUILD_TYPE:STRING=Release</value>
+    </valuelist>
+    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory">/home/pereira/Desktop/goal_recognition/fast-downward/build-src-Desktop_Qt_5_11_1_GCC_64bit-Release</value>
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
+     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
+      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments"></value>
+      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
+       <value type="QString">all</value>
+      </valuelist>
+      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">CMake Build</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
+     </valuemap>
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
+    </valuemap>
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
+     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
+      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments"></value>
+      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
+       <value type="QString">clean</value>
+      </valuelist>
+      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">CMake Build</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
+     </valuemap>
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
+    </valuemap>
+    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
+    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
+    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Release</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Release</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeBuildConfiguration</value>
+   </valuemap>
+   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.3">
+    <valuelist type="QVariantList" key="CMake.Configuration">
+     <value type="QString">CMAKE_BUILD_TYPE:STRING=RelWithDebInfo</value>
+    </valuelist>
+    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory">/home/pereira/Desktop/goal_recognition/fast-downward/build-src-Desktop_Qt_5_11_1_GCC_64bit-Release with Debug Information</value>
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
+     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
+      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments"></value>
+      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
+       <value type="QString">all</value>
+      </valuelist>
+      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">CMake Build</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
+     </valuemap>
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
+    </valuemap>
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
+     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
+      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments"></value>
+      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
+       <value type="QString">clean</value>
+      </valuelist>
+      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">CMake Build</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
+     </valuemap>
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
+    </valuemap>
+    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
+    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
+    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Release with Debug Information</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Release with Debug Information</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeBuildConfiguration</value>
+   </valuemap>
+   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.4">
+    <valuelist type="QVariantList" key="CMake.Configuration">
+     <value type="QString">CMAKE_BUILD_TYPE:STRING=MinSizeRel</value>
+    </valuelist>
+    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory">/home/pereira/Desktop/goal_recognition/fast-downward/build-src-Desktop_Qt_5_11_1_GCC_64bit-Minimum Size Release</value>
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
+     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
+      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments"></value>
+      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
+       <value type="QString">all</value>
+      </valuelist>
+      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">CMake Build</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
+     </valuemap>
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
+    </valuemap>
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
+     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
+      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments"></value>
+      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
+       <value type="QString">clean</value>
+      </valuelist>
+      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">CMake Build</value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
+     </valuemap>
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
+    </valuemap>
+    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
+    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
+    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Minimum Size Release</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Minimum Size Release</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeBuildConfiguration</value>
+   </valuemap>
+   <value type="int" key="ProjectExplorer.Target.BuildConfigurationCount">5</value>
+   <valuemap type="QVariantMap" key="ProjectExplorer.Target.DeployConfiguration.0">
+    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
+     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">0</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Deploy</value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Deploy</value>
+    </valuemap>
+    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">1</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Deploy Configuration</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.DefaultDeployConfiguration</value>
+   </valuemap>
+   <value type="int" key="ProjectExplorer.Target.DeployConfigurationCount">1</value>
+   <valuemap type="QVariantMap" key="ProjectExplorer.Target.PluginSettings"/>
+   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.0">
+    <value type="bool" key="Analyzer.QmlProfiler.AggregateTraces">false</value>
+    <value type="bool" key="Analyzer.QmlProfiler.FlushEnabled">false</value>
+    <value type="uint" key="Analyzer.QmlProfiler.FlushInterval">1000</value>
+    <value type="QString" key="Analyzer.QmlProfiler.LastTraceFile"></value>
+    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
+    <valuelist type="QVariantList" key="Analyzer.Valgrind.AddedSuppressionFiles"/>
+    <value type="bool" key="Analyzer.Valgrind.Callgrind.CollectBusEvents">false</value>
+    <value type="bool" key="Analyzer.Valgrind.Callgrind.CollectSystime">false</value>
+    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableBranchSim">false</value>
+    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableCacheSim">false</value>
+    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableEventToolTips">true</value>
+    <value type="double" key="Analyzer.Valgrind.Callgrind.MinimumCostRatio">0.01</value>
+    <value type="double" key="Analyzer.Valgrind.Callgrind.VisualisationMinimumCostRatio">10</value>
+    <value type="bool" key="Analyzer.Valgrind.FilterExternalIssues">true</value>
+    <value type="int" key="Analyzer.Valgrind.LeakCheckOnFinish">1</value>
+    <value type="int" key="Analyzer.Valgrind.NumCallers">25</value>
+    <valuelist type="QVariantList" key="Analyzer.Valgrind.RemovedSuppressionFiles"/>
+    <value type="int" key="Analyzer.Valgrind.SelfModifyingCodeDetection">1</value>
+    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
+    <value type="bool" key="Analyzer.Valgrind.ShowReachable">false</value>
+    <value type="bool" key="Analyzer.Valgrind.TrackOrigins">true</value>
+    <value type="QString" key="Analyzer.Valgrind.ValgrindExecutable">valgrind</value>
+    <valuelist type="QVariantList" key="Analyzer.Valgrind.VisibleErrorKinds">
+     <value type="int">0</value>
+     <value type="int">1</value>
+     <value type="int">2</value>
+     <value type="int">3</value>
+     <value type="int">4</value>
+     <value type="int">5</value>
+     <value type="int">6</value>
+     <value type="int">7</value>
+     <value type="int">8</value>
+     <value type="int">9</value>
+     <value type="int">10</value>
+     <value type="int">11</value>
+     <value type="int">12</value>
+     <value type="int">13</value>
+     <value type="int">14</value>
+    </valuelist>
+    <value type="QString" key="CMakeProjectManager.CMakeRunConfiguration.Arguments"></value>
+    <value type="QString" key="CMakeProjectManager.CMakeRunConfiguration.UserWorkingDirectory"></value>
+    <value type="QString" key="CMakeProjectManager.CMakeRunConfiguration.UserWorkingDirectory.default">/tmp/QtCreator-SxPjod/qtc-cmake-VDDQmFMX/bin</value>
+    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
+    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">downward</value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
+    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.downward
+/home/pereira/Desktop/goal_recognition/fast-downward/src/search/</value>
+    <value type="uint" key="RunConfiguration.QmlDebugServerPort">3768</value>
+    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
+    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
+    <value type="bool" key="RunConfiguration.UseMultiProcess">false</value>
+    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
+    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
+   </valuemap>
+   <value type="int" key="ProjectExplorer.Target.RunConfigurationCount">1</value>
+  </valuemap>
+ </data>
+ <data>
+  <variable>ProjectExplorer.Project.TargetCount</variable>
+  <value type="int">1</value>
+ </data>
+ <data>
+  <variable>ProjectExplorer.Project.Updater.FileVersion</variable>
+  <value type="int">18</value>
+ </data>
+ <data>
+  <variable>Version</variable>
+  <value type="int">18</value>
+ </data>
+</qtcreator>
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/src/cmake_modules/FastDownwardMacros.cmake fast-downward/src/cmake_modules/FastDownwardMacros.cmake
--- fast-downward-original/src/cmake_modules/FastDownwardMacros.cmake	2019-01-17 20:45:39.710846458 -0200
+++ fast-downward/src/cmake_modules/FastDownwardMacros.cmake	2019-01-15 11:05:11.834522492 -0200
@@ -18,7 +18,7 @@
 
         ## Configuration-specific flags
         set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -fomit-frame-pointer")
-        set(CMAKE_CXX_FLAGS_DEBUG "-O3 -D_GLIBCXX_DEBUG")
+        set(CMAKE_CXX_FLAGS_DEBUG "-O0 -D_GLIBCXX_DEBUG")
         set(CMAKE_CXX_FLAGS_PROFILE "-O3 -pg")
     elseif(MSVC)
         # We force linking to be static on Windows because this makes compiling OSI simpler
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/src/search/cegar/abstract_search.cc fast-downward/src/search/cegar/abstract_search.cc
--- fast-downward-original/src/search/cegar/abstract_search.cc	2019-01-17 20:45:41.226854642 -0200
+++ fast-downward/src/search/cegar/abstract_search.cc	2019-01-15 11:05:11.766522618 -0200
@@ -47,13 +47,38 @@
 }
 
 void AbstractSearch::update_goal_distances(const Solution &solution) {
+    /*
+      Originally, we only updated the goal distances of states that are part of
+      the trace (see Seipp and Helmert, JAIR 2018). The code below generalizes
+      this idea and potentially updates the goal distances of all states.
+
+      Let C* be the cost of the trace and g(s) be the g value of states s when
+      A* finds the trace. Then for all states s with g(s) < INF (i.e., s has
+      been reached by the search), C*-g(s) is a lower bound on the goal
+      distance. This is the case since
+
+      g(s) >= g*(s) [1]
+
+      and
+
+          f*(s) >= C*         (optimality of A* with an admissible heuristic)
+      ==> g*(s) + h*(s) >= C* (definition of f values)
+      ==> g(s) + h*(s) >= C*  (using [1])
+      ==> h*(s) >= C* - g(s)  (arithmetic)
+
+      Together with our existing lower bound h*(s) >= h(s), i.e., the h values
+      from the last iteration, for each abstract state s with g(s) < INF, we
+      can set h(s) = max(h(s), C*-g(s)).
+    */
     int solution_cost = 0;
     for (const Transition &transition : solution) {
         solution_cost += operator_costs[transition.op_id];
     }
     for (auto &info : search_info) {
-        int new_h = max(info.get_h_value(), solution_cost - info.get_g_value());
-        info.increase_h_value_to(new_h);
+        if (info.get_g_value() < INF) {
+            int new_h = max(info.get_h_value(), solution_cost - info.get_g_value());
+            info.increase_h_value_to(new_h);
+        }
     }
 }
 
@@ -64,7 +89,6 @@
     reset(transitions.size());
     search_info[init_id].decrease_g_value_to(0);
     open_queue.push(search_info[init_id].get_h_value(), init_id);
-
     int goal_id = astar_search(transitions, true, &goal_ids);
     open_queue.clear();
     bool has_found_solution = (goal_id != UNDEFINED);
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/src/search/DownwardFiles.cmake fast-downward/src/search/DownwardFiles.cmake
--- fast-downward-original/src/search/DownwardFiles.cmake	2019-01-17 20:45:41.226854642 -0200
+++ fast-downward/src/search/DownwardFiles.cmake	2019-01-15 11:05:11.834522492 -0200
@@ -698,6 +698,18 @@
 )
 
 fast_downward_plugin(
+    NAME OC_SINGLESHOT
+    HELP "Plugin containing the code for operator counting single shot"
+    SOURCES
+        operator_counting/constraint_generator
+        operator_counting/lm_cut_constraints
+        operator_counting/oc_single_shot_heuristic
+        operator_counting/pho_constraints
+        operator_counting/state_equation_constraints
+    DEPENDS LP_SOLVER LANDMARK_CUT_HEURISTIC PDBS TASK_PROPERTIES
+)
+
+fast_downward_plugin(
     NAME PDBS
     HELP "Plugin containing the code for PDBs"
     SOURCES
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/src/search/operator_counting/oc_single_shot_heuristic.cc fast-downward/src/search/operator_counting/oc_single_shot_heuristic.cc
--- fast-downward-original/src/search/operator_counting/oc_single_shot_heuristic.cc	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/src/search/operator_counting/oc_single_shot_heuristic.cc	2019-01-17 17:40:37.508721268 -0200
@@ -0,0 +1,346 @@
+#include "oc_single_shot_heuristic.h"
+
+#include "constraint_generator.h"
+
+#include "../option_parser.h"
+#include "../plugin.h"
+
+#include "../utils/markup.h"
+
+#include <cmath>
+#include <fstream>
+
+#include <algorithm> 
+#include <cctype>
+#include <locale>
+
+// trim from start (in place)
+static inline void ltrim(std::string &s) {
+    s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](int ch) {
+        return !std::isspace(ch);
+    }));
+}
+
+// trim from end (in place)
+static inline void rtrim(std::string &s) {
+    s.erase(std::find_if(s.rbegin(), s.rend(), [](int ch) {
+        return !std::isspace(ch);
+    }).base(), s.end());
+}
+
+// trim from both ends (in place)
+static inline void trim(std::string &s) {
+    ltrim(s);
+    rtrim(s);
+}
+
+using namespace std;
+
+namespace operator_counting {
+
+OCSingleShotHeuristic::OCSingleShotHeuristic(const Options &opts)
+    : Heuristic(opts),
+      constraint_generators(
+          opts.get_list<shared_ptr<ConstraintGenerator>>("constraint_generators")),
+      lp_solver(lp::LPSolverType(opts.get_enum("lpsolver"))),
+      enforce_observations(opts.get("enforce_observations",false)),
+      soft_constraints(opts.get("soft_constraints",false)),
+      op_indexes(),
+      observations(){
+
+    load_observations();
+
+    vector<lp::LPVariable> variables;
+    double infinity = lp_solver.get_infinity();
+    for (OperatorProxy op : task_proxy.get_operators()) {
+        int op_cost = op.get_cost();
+        if (soft_constraints == false) {
+            variables.push_back(lp::LPVariable(0, infinity, op_cost));
+        } else { // Add variables to create soft constraints
+            variables.push_back(lp::LPVariable(0, infinity, 10000*op_cost));
+        }
+    }
+
+    vector<lp::LPConstraint> constraints;
+    for (const auto &generator : constraint_generators) {
+        generator->initialize_constraints(task, constraints, infinity);
+    }
+
+    map_operators(false);
+
+    if (soft_constraints == true) {
+        add_observation_soft_constraints(variables, constraints);
+    }
+    if(enforce_observations == true) {
+        enforce_observation_constraints(constraints);
+    }
+
+    show_variables_and_objective(variables, false);
+
+    lp_solver.load_problem(lp::LPObjectiveSense::MINIMIZE, variables, constraints);
+}
+
+void OCSingleShotHeuristic::map_operators(bool show) {
+    if (show == true) {
+        cout << endl << string(80, '*') << endl;
+        cout << "# Mapping X -> op: " << endl;
+    }
+    int i = 0;
+    for (OperatorProxy op : task_proxy.get_operators()) {
+        // Caching operator variable indexes
+        std::string op_name (op.get_name());
+        for (size_t i = 0; i< op.get_name().size(); ++i) {
+            op_name[i] = tolower(op_name.c_str()[i]);
+        }
+
+        op_indexes[op_name] = i;
+        if (show == true) {
+            cout << "["<< op_name<< "]: " << op_indexes[op_name] << endl;
+        }
+        i++;
+    }
+    if (show == true) {
+        cout << string(80, '*') << endl << endl;
+    }
+}
+
+void OCSingleShotHeuristic::show_variables_and_objective(const std::vector<lp::LPVariable> &variables, bool show) {
+    if (show == true) {
+        cout << endl << string(80, '*') << endl;
+        cout << "# Variables(" << variables.size() << "): " << endl;
+        for (int i = 0; i < (int) variables.size(); ++i) {
+            cout << "X[" << i << "] = Variable('X_" << i << "'";
+            cout << ", lb=" << variables[i].lower_bound;
+            cout << ", ub=" << variables[i].upper_bound;
+            cout << ", cost[" << i << "] = " << variables[i].objective_coefficient << endl;
+        }
+        cout << string(80, '*') << endl << endl;
+
+        cout << endl << string(80, '*') << endl;
+        cout << "# Objective function: " << endl;
+        cout << "obj = Objective(";
+        for (int i = 0; i < (int) variables.size(); ++i) {
+            cout << "cost[" << i << "] * X[" << i << "]";
+            if (i < (int) variables.size() - 1) {
+                cout << " + ";
+            }
+        }
+        cout << ", direction='min')" << endl;
+        cout << string(80, '*') << endl << endl;
+    }
+}
+
+void OCSingleShotHeuristic::add_observation_soft_constraints(std::vector<lp::LPVariable> &variables, std::vector<lp::LPConstraint> &constraints) {
+    double infinity = lp_solver.get_infinity();
+    cout << endl << string(80, '*') << endl;
+    // Adding constraints
+    cout << "Add soft constraints" << endl;
+    for(vector<string>::iterator it = observations.begin() ; it != observations.end(); ++it) {
+        variables.push_back(lp::LPVariable(-infinity, infinity, -1.0));
+
+        cout << "Adding soft constraint on (" << (*it) << "), index " << std::to_string(op_indexes[*it]) << endl;
+        lp::LPConstraint constraint(0.0, 0.0);
+        constraint.insert(op_indexes[*it], 1.0);
+        constraint.insert(variables.size() - 1, -1.0);
+
+        cout << "X[" << op_indexes[*it] << "] = Variable('X_" << op_indexes[*it]  << "'";
+        cout << ", lb=" << variables[op_indexes[*it]].lower_bound;
+        cout << ", ub=" << variables[op_indexes[*it]].upper_bound;
+        cout << ", cost[" << op_indexes[*it] << "] = " << variables[op_indexes[*it]].objective_coefficient << endl;
+
+        cout << "X[" << variables.size() - 1 << "] = Variable('X_" << variables.size() - 1  << "'";
+        cout << ", lb=" << variables[variables.size() - 1].lower_bound;
+        cout << ", ub=" << variables[variables.size() - 1].upper_bound;
+        cout << ", cost[" << variables.size() - 1 << "] = " << variables[variables.size() - 1].objective_coefficient << endl;
+
+        cout << "constraint variables: " << constraint.get_variables()[0];
+        cout << ", " << constraint.get_variables()[1] << " - ";
+        cout << "constraint coefficients: " << constraint.get_coefficients()[0];
+        cout << ", " << constraint.get_coefficients()[1] << endl << endl;
+        constraints.push_back(constraint);
+    }
+    cout << endl << string(80, '*') << endl;
+}
+
+void OCSingleShotHeuristic::load_observations() {
+    // Read observations from file
+    cout << endl << string(80, '*') << endl;
+    cout << std::endl << "Load observations" << std::endl;
+    ifstream obs_file;
+    obs_file.open("obs.dat");
+    if(obs_file.is_open()){
+        while(!obs_file.eof()) {
+            string obs;
+            getline(obs_file, obs);
+            trim(obs);
+            if(!obs.empty() && obs[0]!=';') {
+                obs = obs.substr(1,obs.length()-2);
+                std::string obs_name (obs);
+                for (size_t i = 0; i< obs.size(); ++i) {
+                    obs_name[i] = tolower(obs.c_str()[i]);
+                }
+                cout << "Observation: " << obs_name << endl;
+                observations.push_back(obs_name);
+            }
+        }
+    }
+    cout << endl << string(80, '*') << endl;
+
+    obs_file.close();
+}
+
+void OCSingleShotHeuristic::enforce_observation_constraints(std::vector<lp::LPConstraint> &constraints) {
+    cout << endl << string(80, '*') << endl;
+    // Adding constraints
+    std::cout << "Enforcing observation constraints" << std::endl;
+
+    double infinity = lp_solver.get_infinity();
+    for(vector<string>::iterator it = observations.begin() ; it != observations.end(); ++it) {
+        lp::LPConstraint constraint(1, infinity);
+
+        cout << "constraint " << (*it) << ": " << std::to_string(op_indexes[*it]) << endl;
+        constraint.insert(op_indexes[*it], 1);
+        constraints.push_back(constraint);
+    }
+    cout << endl << string(80, '*') << endl;
+}
+
+void OCSingleShotHeuristic::output_results(int result) {
+    cout << endl << string(80, '*') << endl;
+    vector<double> solution = lp_solver.extract_solution();
+    for (int i = 0; i < (int) solution.size(); ++i) {
+        cout << "X[" << i << "] = " << solution[i] << endl;
+    }
+    std::cout << "# observations in solution (" << observations.size() << "): " << std::endl;
+    double sat_observations = 0.0;
+    for(vector<string>::iterator it = observations.begin() ; it != observations.end(); ++it) {
+        cout << (*it) << ": " << solution[op_indexes[*it]] << endl;
+        sat_observations += solution[op_indexes[*it]];
+    }
+    cout << "# sat observations: " << sat_observations << endl;
+    cout << "# h-value: " << result << endl;
+    cout << string(80, '*') << endl;
+
+    cout << endl << string(80, '*') << endl;
+
+    cout << "Writing results" << endl;
+    ofstream results;
+    //cout << "Writing results" << endl;
+    results.open("ocsingleshot_heuristic_result.dat");
+    results << "-- ";
+    results << endl << result << endl;
+    // Printing counts
+    int var_i=0;
+    vector<double> counts = lp_solver.extract_solution();
+    for (OperatorProxy op : task_proxy.get_operators()) {
+        // cout << "(" << op.get_name() << ") = " << counts[var_i] << endl;
+        if (counts[var_i] > 0 ) {
+            results << "(" << op.get_name() << ") = " << counts[var_i] << endl;
+        }
+        var_i++;
+    }
+
+    results.flush();
+    results.close();
+}
+
+OCSingleShotHeuristic::~OCSingleShotHeuristic() {
+}
+
+int OCSingleShotHeuristic::compute_heuristic(const GlobalState &global_state) {
+    State state = convert_global_state(global_state);
+    return compute_heuristic(state);
+}
+
+int OCSingleShotHeuristic::compute_heuristic(const State &state) {
+    assert(!lp_solver.has_temporary_constraints());
+    for (const auto &generator : constraint_generators) {
+          bool dead_end = generator->update_constraints(state, lp_solver);
+        if (dead_end) {
+            lp_solver.clear_temporary_constraints();
+            return DEAD_END;
+        }
+    }
+
+    int result;
+    lp_solver.solve();
+    if (lp_solver.has_optimal_solution()) {
+        double epsilon = 0.01;
+        double objective_value = lp_solver.get_objective_value();
+        result = ceil(objective_value - epsilon);
+        
+    } else {
+        result = DEAD_END;
+    }
+
+    lp_solver.print_statistics();
+
+    ///////////////////////////////////////////////////////////////////
+    output_results(result);
+
+    if(result == DEAD_END)
+        exit(EXIT_FAILURE);
+    else
+        exit(EXIT_SUCCESS);
+    ///////////////////////////////////////////////////////////////////
+
+    lp_solver.clear_temporary_constraints();
+    return result;
+}
+
+static shared_ptr<Heuristic> _parse(OptionParser &parser) {
+    parser.document_synopsis(
+        "Operator counting heuristic, single shot call for recognition",
+        "An operator counting heuristic computes a linear program (LP) in each "
+        "state. The LP has one variable Count_o for each operator o that "
+        "represents how often the operator is used in a plan. Operator "
+        "counting constraints are linear constraints over these varaibles that "
+        "are guaranteed to have a solution with Count_o = occurrences(o, pi) "
+        "for every plan pi. Minimizing the total cost of operators subject to "
+        "some operator counting constraints is an admissible heuristic. "
+        "For details, see" + utils::format_paper_reference( // TODO - Change this for our paper
+            {"Florian Pommerening", "Gabriele Roeger", "Malte Helmert",
+             "Blai Bonet"},
+            "LP-based Heuristics for Cost-optimal Planning",
+            "http://www.aaai.org/ocs/index.php/ICAPS/ICAPS14/paper/view/7892/8031",
+            "Proceedings of the Twenty-Fourth International Conference"
+            " on Automated Planning and Scheduling (ICAPS 2014)",
+            "226-234",
+            "AAAI Press 2014"));
+
+    parser.document_language_support("action costs", "supported");
+    parser.document_language_support(
+        "conditional effects",
+        "not supported (the heuristic supports them in theory, but none of "
+        "the currently implemented constraint generators do)");
+    parser.document_language_support(
+        "axioms",
+        "not supported (the heuristic supports them in theory, but none of "
+        "the currently implemented constraint generators do)");
+    parser.document_property("admissible", "yes");
+    parser.document_property(
+        "consistent",
+        "yes, if all constraint generators represent consistent heuristics");
+    parser.document_property("safe", "yes");
+    // TODO: prefer operators that are non-zero in the solution.
+    parser.document_property("preferred operators", "no");
+
+    parser.add_list_option<shared_ptr<ConstraintGenerator>>(
+        "constraint_generators",
+        "methods that generate constraints over operator counting variables");
+    parser.add_option<bool>("enforce_observations", "whether or not to enforce constraints on observations");
+    parser.add_option<bool>("soft_constraints", "whether or not to use observations as soft constraints");
+    lp::add_lp_solver_option_to_parser(parser);
+    Heuristic::add_options_to_parser(parser);
+    Options opts = parser.parse();
+    if (parser.help_mode())
+        return nullptr;
+    opts.verify_list_non_empty<shared_ptr<ConstraintGenerator>>(
+        "constraint_generators");
+    if (parser.dry_run())
+        return nullptr;
+    return make_shared<OCSingleShotHeuristic>(opts);
+}
+
+static Plugin<Evaluator> _plugin("ocsingleshot", _parse);
+}
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/src/search/operator_counting/oc_single_shot_heuristic.h fast-downward/src/search/operator_counting/oc_single_shot_heuristic.h
--- fast-downward-original/src/search/operator_counting/oc_single_shot_heuristic.h	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/src/search/operator_counting/oc_single_shot_heuristic.h	2019-01-17 17:20:02.452255858 -0200
@@ -0,0 +1,41 @@
+#ifndef OPERATOR_COUNTING_OPERATOR_COUNTING_HEURISTIC_H
+#define OPERATOR_COUNTING_OPERATOR_COUNTING_HEURISTIC_H
+
+#include "../heuristic.h"
+
+#include "../lp/lp_solver.h"
+
+#include <memory>
+#include <vector>
+#include <string>
+
+namespace options {
+class Options;
+}
+
+namespace operator_counting {
+class ConstraintGenerator;
+
+class OCSingleShotHeuristic : public Heuristic {
+    std::vector<std::shared_ptr<ConstraintGenerator>> constraint_generators;
+    lp::LPSolver lp_solver;
+    bool enforce_observations;
+    bool soft_constraints;
+    std::unordered_map<std::string,int> op_indexes;
+    std::vector<std::string> observations;
+protected:
+    virtual int compute_heuristic(const GlobalState &global_state) override;
+    int compute_heuristic(const State &state);
+    void load_observations();
+    void enforce_observation_constraints(std::vector<lp::LPConstraint> &constraints);
+    void add_observation_soft_constraints(std::vector<lp::LPVariable> &variables, std::vector<lp::LPConstraint> &constraints);
+    void output_results(int result);
+public:
+    explicit OCSingleShotHeuristic(const options::Options &opts);
+    ~OCSingleShotHeuristic();
+    void map_operators(bool show = false);
+    void show_variables_and_objective(const std::vector<lp::LPVariable> &variables, bool show = false);
+};
+}
+
+#endif
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/src/search/operator_counting/operator_counting_heuristic.cc.orig fast-downward/src/search/operator_counting/operator_counting_heuristic.cc.orig
--- fast-downward-original/src/search/operator_counting/operator_counting_heuristic.cc.orig	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/src/search/operator_counting/operator_counting_heuristic.cc.orig	2019-01-15 11:05:11.834522492 -0200
@@ -0,0 +1,225 @@
+#include "operator_counting_heuristic.h"
+
+#include "constraint_generator.h"
+
+#include "../option_parser.h"
+#include "../plugin.h"
+
+#include "../utils/markup.h"
+
+#include <cmath>
+#include <fstream>
+
+using namespace std;
+
+namespace operator_counting {
+OperatorCountingHeuristic::OperatorCountingHeuristic(const Options &opts)
+    : Heuristic(opts),
+      constraint_generators(
+          opts.get_list<shared_ptr<ConstraintGenerator>>("constraint_generators")),
+      lp_solver(lp::LPSolverType(opts.get_enum("lpsolver"))) {
+    vector<lp::LPVariable> variables;
+    double infinity = lp_solver.get_infinity();
+    for (OperatorProxy op : task_proxy.get_operators()) {
+        int op_cost = op.get_cost();
+        variables.push_back(lp::LPVariable(0, infinity, op_cost));
+    }
+    vector<lp::LPConstraint> constraints;
+    for (const auto &generator : constraint_generators) {
+        generator->initialize_constraints(task, constraints, infinity);
+    }
+    ///////////////////////////////////////////////////////////////////
+    cout << endl << string(80, '*') << endl;
+    cout << "# Mapping X -> op: " << endl;
+    int i = 0;
+    for (OperatorProxy op : task_proxy.get_operators()) {
+        cout << "# X[" << i << "] = " << op.get_name() << endl;
+        i++;
+    }
+    cout << string(80, '*') << endl << endl;
+    ///////////////////////////////////////////////////////////////////
+
+    ///////////////////////////////////////////////////////////////////
+    cout << endl << string(80, '*') << endl;
+    cout << "# Variables(" << variables.size() << "): " << endl;
+    for (int i = 0; i < (int) variables.size(); ++i) {
+        cout << "X[" << i << "] = Variable('X_" << i << "'";
+        cout << ", lb=" << variables[i].lower_bound;
+        cout << ", ub=" << variables[i].upper_bound;
+        cout << ", type='integer')";
+        cout << ", cost[" << i << "] = 1" << endl;
+    }
+    cout << string(80, '*') << endl << endl;
+    ///////////////////////////////////////////////////////////////////
+
+    ///////////////////////////////////////////////////////////////////
+    cout << endl << string(80, '*') << endl;
+    cout << "# Objective function: " << endl;
+    cout << "obj = Objective(";
+    for (int i = 0; i < (int) variables.size(); ++i) {
+        cout << "cost[" << i << "] * X[" << i << "]";
+        if (i < (int) variables.size() - 1) {
+            cout << " + ";
+        }
+    }
+    cout << ", direction='min')" << endl;
+    cout << string(80, '*') << endl << endl;
+    ///////////////////////////////////////////////////////////////////
+
+    lp_solver.load_problem(lp::LPObjectiveSense::MINIMIZE, variables, constraints);
+}
+
+OperatorCountingHeuristic::~OperatorCountingHeuristic() {
+}
+
+int OperatorCountingHeuristic::compute_heuristic(const GlobalState &global_state) {
+    State state = convert_global_state(global_state);
+    return compute_heuristic(state);
+}
+
+int OperatorCountingHeuristic::compute_heuristic(const State &state) {
+    assert(!lp_solver.has_temporary_constraints());
+    for (const auto &generator : constraint_generators) {
+        bool dead_end = generator->update_constraints(state, lp_solver);
+        if (dead_end) {
+            lp_solver.clear_temporary_constraints();
+            return DEAD_END;
+        }
+    }
+
+    ///////////////////////////////////////////////////////////////////
+    ifstream file;
+    file.open("new_constraint.txt");
+    if (file.is_open()) {
+        double lb, ub;
+        file >> lb >> ub;
+
+        file.get();
+
+        string indexes;
+        getline(file, indexes);
+        istringstream indexes_iss(indexes);
+        vector<string> indexes_str((istream_iterator<string>(indexes_iss)), istream_iterator<string>());
+        vector<int> indexes_int;
+        transform(indexes_str.begin(), indexes_str.end(), back_inserter(indexes_int), [](string i){
+            return atoi(i.c_str());
+        });
+
+        string coeffs;
+        getline(file, coeffs);
+        istringstream coeffs_iss(coeffs);
+        vector<string> coeffs_str((istream_iterator<string>(coeffs_iss)), istream_iterator<string>());
+        vector<double> coeffs_double;
+        transform(coeffs_str.begin(), coeffs_str.end(), back_inserter(coeffs_double), [](string i){
+            return atof(i.c_str());
+        });
+
+        file.close();
+
+        vector<lp::LPConstraint> new_constraints;
+        lp::LPConstraint constraint(lb, ub);
+        for (size_t i = 0; i < indexes_int.size(); ++i) {
+            int index = indexes_int[i];
+            double coeff = coeffs_double[i];
+            constraint.insert(index, coeff);
+        }
+        new_constraints.push_back(constraint);
+        lp_solver.add_new_constraints(new_constraints);
+
+        cout << "# Adding constraint from file:" << endl;
+        cout << "constraints.append(Constraint(";
+        for (int j = 0; j < (int) constraint.get_variables().size(); ++j) {
+            int var = constraint.get_variables()[j];
+            double coe = constraint.get_coefficients()[j];
+            cout << coe << "*X[" << var << "]";
+            if (j < (int) constraint.get_variables().size() - 1) {
+                cout << " + ";
+            }
+        }
+        cout << ", lb=" << constraint.get_lower_bound();
+        cout << ", ub=" << constraint.get_upper_bound() << "))" << endl;
+    }
+    ///////////////////////////////////////////////////////////////////
+
+    int result;
+    lp_solver.solve();
+    if (lp_solver.has_optimal_solution()) {
+        double epsilon = 0.01;
+        double objective_value = lp_solver.get_objective_value();
+        result = ceil(objective_value - epsilon);
+    } else {
+        result = DEAD_END;
+    }
+
+    ///////////////////////////////////////////////////////////////////
+    cout << endl << string(80, '*') << endl;
+    cout << "# Objective value: " << result << endl;
+    cout << "# Solution: " << endl;
+    vector<double> solution = lp_solver.extract_solution();
+    for (int i = 0; i < (int) solution.size(); ++i) {
+        cout << "X[" << i << "] = " << solution[i] << endl;
+    }
+    cout << string(80, '*') << endl;
+
+    exit(100);
+    ///////////////////////////////////////////////////////////////////
+
+    lp_solver.clear_temporary_constraints();
+    return result;
+}
+
+static shared_ptr<Heuristic> _parse(OptionParser &parser) {
+    parser.document_synopsis(
+        "Operator counting heuristic",
+        "An operator counting heuristic computes a linear program (LP) in each "
+        "state. The LP has one variable Count_o for each operator o that "
+        "represents how often the operator is used in a plan. Operator "
+        "counting constraints are linear constraints over these varaibles that "
+        "are guaranteed to have a solution with Count_o = occurrences(o, pi) "
+        "for every plan pi. Minimizing the total cost of operators subject to "
+        "some operator counting constraints is an admissible heuristic. "
+        "For details, see" + utils::format_paper_reference(
+            {"Florian Pommerening", "Gabriele Roeger", "Malte Helmert",
+             "Blai Bonet"},
+            "LP-based Heuristics for Cost-optimal Planning",
+            "http://www.aaai.org/ocs/index.php/ICAPS/ICAPS14/paper/view/7892/8031",
+            "Proceedings of the Twenty-Fourth International Conference"
+            " on Automated Planning and Scheduling (ICAPS 2014)",
+            "226-234",
+            "AAAI Press 2014"));
+
+    parser.document_language_support("action costs", "supported");
+    parser.document_language_support(
+        "conditional effects",
+        "not supported (the heuristic supports them in theory, but none of "
+        "the currently implemented constraint generators do)");
+    parser.document_language_support(
+        "axioms",
+        "not supported (the heuristic supports them in theory, but none of "
+        "the currently implemented constraint generators do)");
+    parser.document_property("admissible", "yes");
+    parser.document_property(
+        "consistent",
+        "yes, if all constraint generators represent consistent heuristics");
+    parser.document_property("safe", "yes");
+    // TODO: prefer operators that are non-zero in the solution.
+    parser.document_property("preferred operators", "no");
+
+
+    parser.add_list_option<shared_ptr<ConstraintGenerator>>(
+        "constraint_generators",
+        "methods that generate constraints over operator counting variables");
+    lp::add_lp_solver_option_to_parser(parser);
+    Heuristic::add_options_to_parser(parser);
+    Options opts = parser.parse();
+    if (parser.help_mode())
+        return nullptr;
+    opts.verify_list_non_empty<shared_ptr<ConstraintGenerator>>(
+        "constraint_generators");
+    if (parser.dry_run())
+        return nullptr;
+    return make_shared<OperatorCountingHeuristic>(opts);
+}
+
+static Plugin<Evaluator> _plugin("operatorcounting", _parse);
+}
diff -X lp-recognizer/fd-patch.ignore -ruN fast-downward-original/template.pddl fast-downward/template.pddl
--- fast-downward-original/template.pddl	1969-12-31 21:00:00.000000000 -0300
+++ fast-downward/template.pddl	2009-01-08 21:45:09.000000000 -0200
@@ -0,0 +1,27 @@
+
+(define (problem blocks_words)
+	(:domain blocks)
+(:objects 
+
+D R A W O E P C - block
+)
+(:init
+(HANDEMPTY)
+(CLEAR O)
+(ONTABLE O)
+(CLEAR R)
+(ON R P)
+(ONTABLE P)
+(CLEAR E)
+(ONTABLE E)
+(CLEAR D)
+(ON D A)
+(ON A C)
+(ONTABLE C)
+(CLEAR W)
+(ONTABLE W)
+)
+(:goal (and
+<HYPOTHESIS>
+))
+)
